{"version":3,"sources":["webpack:///ng-tree-view.min.js","webpack:///webpack/bootstrap 5d70c475422848e6ff65","webpack:///external \"angular\"","webpack:///./lib/index.js","webpack:///./lib/TreeGenerator.service.js","webpack:///./lib/TreeView.service.js","webpack:///./lib/TreeViewController.js","webpack:///./lib/treeView.directive.js","webpack:///./index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","angular","_interopRequireDefault","obj","default","_angular","_angular2","_treeView","_treeView2","_TreeView","_TreeView2","_TreeGenerator","_TreeGenerator2","_TreeViewController","_TreeViewController2","_module","directive","factory","controller","TreeGenerator","$compile","shouldGoDeeper","maxDepth","undefined","isNaN","generateHtml","nodes","params","isArray","length","html","index","node","getListItem","isCheckboxEnabled","getToggleLinkHtml","nodeExpr","isCollapsed","isNotCollapsed","getLabelWithCheckbox","isSelected","getLabel","id","label","collapsed","children","service","generate","scope","$inject","TreeView","mapTree","tree","callback","map","mappedNode","filterTree","result","shouldIncludeIt","push","filterTreeInclusive","filteredChildren","concat","hasChildren","walk","Array","forEach","filter","inclusiveChildren","flattenAsObject","count","reduce","acc","childTreeCount","TreeViewController","$scope","$timeout","$element","init","vm","flatNodes","render","generateTree","this","Number","checkboxes","toggleNode","$event","clickedElement","currentTarget","nodeElement","element","closest","containsChildTree","find","childTree","append","handleChange","isFunction","onSelectionChange","treeView","restrict","replace","template","controllerAs","bindToController"],"mappings":"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","file":"ng-tree-view.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 6);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = angular;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _angular = __webpack_require__(0);\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _treeView = __webpack_require__(5);\n\nvar _treeView2 = _interopRequireDefault(_treeView);\n\nvar _TreeView = __webpack_require__(3);\n\nvar _TreeView2 = _interopRequireDefault(_TreeView);\n\nvar _TreeGenerator = __webpack_require__(2);\n\nvar _TreeGenerator2 = _interopRequireDefault(_TreeGenerator);\n\nvar _TreeViewController = __webpack_require__(4);\n\nvar _TreeViewController2 = _interopRequireDefault(_TreeViewController);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar _module = _angular2.default.module('ngTreeView', []);\n\n_module.directive('treeView', _treeView2.default).factory('TreeView', _TreeView2.default).factory('TreeGenerator', _TreeGenerator2.default).controller('TreeViewController', _TreeViewController2.default);\n\nexports.default = _module.name;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = TreeGenerator;\n\nvar _angular = __webpack_require__(0);\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nTreeGenerator.$inject = ['$compile'];\n\nfunction TreeGenerator($compile) {\n    var service = {};\n\n    service.generate = function (nodes, params) {\n        var html = generateHtml(nodes, params.maxDepth, params);\n\n        return $compile(html)(params.scope);\n    };\n\n    /**\n     * Checks if should render further nodes of a tree depending upon the value of maxDepth.\n     *\n     * If maxDepth is not provided (undefined) then it implies it should render all nodes i.e discard max depth,\n     * if maxDepth is provided and is a number it checks if max depth is greater than zero for rendering child nodes.\n     *\n     * @param maxDepth\n     * @returns {boolean}\n     */\n    function shouldGoDeeper(maxDepth) {\n        return maxDepth === undefined || !isNaN(maxDepth) && maxDepth >= 0;\n    }\n\n    function generateHtml(nodes, maxDepth, params) {\n        if (!_angular2.default.isArray(nodes) || nodes.length === 0 || !shouldGoDeeper(maxDepth)) {\n            return '';\n        }\n\n        var html = '<ul class=\"tree-view collapsible\">';\n\n        for (var index = 0; index < nodes.length; index++) {\n            var node = nodes[index];\n\n            html += getListItem(node, index, {\n                maxDepth: maxDepth,\n                isCheckboxEnabled: params.isCheckboxEnabled\n            });\n        }\n\n        html += '</ul>';\n\n        return html;\n    }\n\n    function getToggleLinkHtml(nodeExpr) {\n        var isCollapsed = nodeExpr + '.collapsed';\n        var isNotCollapsed = '!' + isCollapsed;\n\n        return '<a class=\"toggle\" ng-click=\"vm.toggleNode(' + nodeExpr + ', $event)\" ng-if=\"vm.hasChildren(' + nodeExpr + ')\">' + '<i class=\"fa fa-w fa-chevron-right\" ng-show=\"' + isCollapsed + '\"></i>' + '<i class=\"fa fa-w fa-chevron-down\" ng-show=\"' + isNotCollapsed + '\"></i>' + '</a>';\n    }\n\n    function getLabelWithCheckbox(nodeExpr) {\n        var isSelected = nodeExpr + '.selected';\n        var name = '{{' + nodeExpr + '.name}}';\n\n        return '<label>' + '<input type=\"checkbox\" ng-model=\"' + isSelected + '\" ng-change=\"vm.handleChange(' + nodeExpr + ')\"> ' + '<span>' + name + '</span>' + '</label>';\n    }\n\n    function getLabel(nodeExpr) {\n        var name = '{{' + nodeExpr + '.name}}';\n\n        return '<span class=\"label\">' + name + '</span>';\n    }\n\n    function getListItem(node, index, params) {\n        var maxDepth = params.maxDepth;\n        var nodeExpr = 'vm.flatNodes[' + node.id + ']';\n        var label = params.isCheckboxEnabled ? getLabelWithCheckbox(nodeExpr) : getLabel(nodeExpr);\n\n        node.collapsed = maxDepth === 0;\n        // Decrement maxDepth for recursive calls\n        maxDepth = isNaN(maxDepth) ? undefined : maxDepth - 1;\n\n        return '<li class=\"tree-node\" data-index=\"' + index + '\" data-id=\"' + node.id + '\"' + ' ng-class=\"{parent: vm.hasChildren(' + nodeExpr + '), collapsed: ' + nodeExpr + '.collapsed,' + ' expanded: !' + nodeExpr + '.collapsed}\">' + getToggleLinkHtml(nodeExpr) + label + generateHtml(node.children, maxDepth, params) + '</li>';\n    }\n\n    return service;\n}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = TreeView;\n\nvar _angular = __webpack_require__(0);\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\n// TODO: Convert this to a simple javascript util module that exports some helper tree view methods\nfunction TreeView() {\n    var service = {};\n\n    service.hasChildren = hasChildren;\n\n    /**\n     * Walks through each node of the tree and applies the callback to each node walked.\n     *\n     * @param tree\n     * @param callback\n     */\n    service.walk = function (tree, callback) {\n        if (!Array.isArray(tree)) {\n            tree = [tree];\n        }\n\n        tree.forEach(function (node, index) {\n            callback(node, index);\n\n            if (hasChildren(node)) {\n                service.walk(node.children, callback);\n            }\n        });\n    };\n\n    /**\n     * Filters the tree recursively depending upon the boolean value returned by the callback\n     * for each node.\n     *\n     * @param tree\n     * @param callback\n     * @param inclusiveChildren\n     */\n    service.filter = function (tree, callback, inclusiveChildren) {\n        // If the tree is not an array make it an array\n        if (!_angular2.default.isArray(tree)) {\n            return service.filter([tree], callback, inclusiveChildren);\n        }\n\n        // Whether or not to include the child nodes even if their parent nodes aren't included.\n        if (inclusiveChildren === true) {\n            return filterTreeInclusive(tree, callback);\n        }\n\n        return filterTree(tree, callback);\n    };\n\n    /**\n     * Flattens the tree into a linear object with node id as it's keys.\n     *\n     * @param tree\n     * @returns {{}}\n     */\n    service.flattenAsObject = function (tree) {\n        var object = {};\n\n        service.walk(tree, function (node) {\n            object[node.id] = node;\n        });\n\n        return object;\n    };\n\n    /**\n     * Results a new array (immutable) obtained by applying the callback function to\n     * each node of the tree recursively.\n     *\n     * @param tree\n     * @param callback\n     */\n    service.map = function (tree, callback) {\n        // If the tree is not an array make it an array\n        if (!_angular2.default.isArray(tree)) {\n            return service.map([tree], callback);\n        }\n\n        return mapTree(tree, callback);\n    };\n\n    /**\n     * Counts the number of nodes a tree has.\n     *\n     * @param tree\n     * @returns {number}\n     */\n    service.count = function count(tree) {\n        tree = _angular2.default.isArray(tree) ? tree : [tree];\n\n        return tree.reduce(function (acc, node) {\n            var childTreeCount = hasChildren(node) ? count(node.children) : 0;\n\n            return acc + childTreeCount;\n        }, tree.length);\n    };\n\n    /**\n     * The actual implementation of the recursive map() function for trees.\n     *\n     * @param tree\n     * @param callback\n     * @returns {Array}\n     */\n    function mapTree(tree, callback) {\n        return tree.map(function (node, index) {\n            var mappedNode = callback(node, index);\n\n            // If the node has children then map them as well.\n            if (_angular2.default.isArray(node.children)) {\n                mappedNode.children = mapTree(node.children, callback);\n            }\n\n            return mappedNode;\n        });\n    }\n\n    /**\n     * Filter and return a new tree such that the nodes for which the callback\n     * returns false would be skipped along with all of their child nodes.\n     *\n     * @param tree\n     * @param callback\n     * @returns {Array}\n     */\n    function filterTree(tree, callback) {\n        var result = [];\n\n        if (!_angular2.default.isArray(tree)) {\n            return [];\n        }\n\n        for (var index = 0; index < tree.length; index++) {\n            var node = tree[index];\n            var shouldIncludeIt = callback(node, index);\n\n            // If the condition holds false for a single node\n            // ignore the whole tree of that node (including all it's children).\n            if (!shouldIncludeIt) {\n                continue;\n            }\n\n            node.children = filterTree(node.children, callback);\n            result.push(node);\n        }\n\n        return result;\n    }\n\n    /**\n     * Filter and return a new tree such that the nodes for which the callback returns false\n     * would be skipped but their children might be added to the new tree if the callback returns true\n     * for those.\n     * Note: The tree structure might change for this, as the children nodes could climb up the hierarchy\n     * in case their parents aren't included.\n     *\n     * @param tree\n     * @param callback\n     */\n    function filterTreeInclusive(tree, callback) {\n        var result = [];\n\n        if (!_angular2.default.isArray(tree)) {\n            return [];\n        }\n\n        for (var index = 0; index < tree.length; index++) {\n            var node = tree[index];\n            var shouldIncludeIt = callback(node, index);\n            var filteredChildren = filterTreeInclusive(node.children, callback);\n\n            if (shouldIncludeIt) {\n                // If the condition holds true then include the node\n                // along with it's filtered children.\n                node.children = filteredChildren;\n                result.push(node);\n            } else {\n                // Otherwise, just add the filtered children to the resulting filtered tree.\n                result = result.concat(filteredChildren);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if a node has child nodes.\n     *\n     * @param node\n     * @returns {boolean}\n     */\n    function hasChildren(node) {\n        return _angular2.default.isArray(node.children) && node.children.length > 0;\n    }\n\n    return service;\n}\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = TreeViewController;\n\nvar _angular = __webpack_require__(0);\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nTreeViewController.$inject = ['$scope', '$timeout', '$element', '$compile', 'TreeView', 'TreeGenerator'];\n\nfunction TreeViewController($scope, $timeout, $element, $compile, TreeView, TreeGenerator) {\n    var vm = this;\n\n    vm.maxDepth = Number(vm.maxDepth) || 0;\n    vm.hasChildren = TreeView.hasChildren;\n    vm.flatNodes = {};\n    vm.isCheckboxEnabled = function () {\n        return vm.checkboxes === 'true';\n    };\n\n    vm.toggleNode = function (node, $event) {\n        var clickedElement = $event.currentTarget;\n        var nodeElement = _angular2.default.element(clickedElement).closest('li.tree-node');\n        var containsChildTree = nodeElement.find('ul.tree-view').length > 0;\n\n        // If the node's child tree hasn't been added to the DOM\n        // add it first.\n        if (TreeView.hasChildren(node) && !containsChildTree) {\n            var childTree = generateTree(node.children, 0);\n\n            nodeElement.append(childTree);\n        }\n\n        node.collapsed = !node.collapsed;\n    };\n\n    vm.handleChange = function (node) {\n        if (_angular2.default.isFunction(vm.onSelectionChange)) {\n            vm.onSelectionChange(node);\n        }\n    };\n\n    function init() {\n        $scope.vm = vm;\n        vm.flatNodes = TreeView.flattenAsObject(vm.nodes);\n        $timeout(render);\n    }\n\n    function render() {\n        var tree = generateTree(vm.nodes, vm.maxDepth);\n\n        $element.html(tree);\n    }\n\n    function generateTree(nodes, maxDepth) {\n        return TreeGenerator.generate(nodes, {\n            maxDepth: maxDepth,\n            scope: $scope,\n            isCheckboxEnabled: vm.isCheckboxEnabled()\n        });\n    }\n\n    init();\n}\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = treeView;\nfunction treeView() {\n    return {\n        restrict: 'E',\n        scope: {\n            nodes: '=',\n            maxDepth: '@',\n            checkboxes: '@',\n            onSelectionChange: '='\n        },\n        replace: true,\n        template: '',\n        controller: 'TreeViewController',\n        controllerAs: 'vm',\n        bindToController: true\n    };\n}\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = __webpack_require__(1).default;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// ng-tree-view.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5d70c475422848e6ff65","module.exports = angular;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 0\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nvar _treeView = require('./treeView.directive');\n\nvar _treeView2 = _interopRequireDefault(_treeView);\n\nvar _TreeView = require('./TreeView.service');\n\nvar _TreeView2 = _interopRequireDefault(_TreeView);\n\nvar _TreeGenerator = require('./TreeGenerator.service');\n\nvar _TreeGenerator2 = _interopRequireDefault(_TreeGenerator);\n\nvar _TreeViewController = require('./TreeViewController');\n\nvar _TreeViewController2 = _interopRequireDefault(_TreeViewController);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _module = _angular2.default.module('ngTreeView', []);\n\n_module.directive('treeView', _treeView2.default).factory('TreeView', _TreeView2.default).factory('TreeGenerator', _TreeGenerator2.default).controller('TreeViewController', _TreeViewController2.default);\n\nexports.default = _module.name;\n\n\n// WEBPACK FOOTER //\n// ./lib/index.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = TreeGenerator;\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nTreeGenerator.$inject = ['$compile'];\n\nfunction TreeGenerator($compile) {\n    var service = {};\n\n    service.generate = function (nodes, params) {\n        var html = generateHtml(nodes, params.maxDepth, params);\n\n        return $compile(html)(params.scope);\n    };\n\n    /**\n     * Checks if should render further nodes of a tree depending upon the value of maxDepth.\n     *\n     * If maxDepth is not provided (undefined) then it implies it should render all nodes i.e discard max depth,\n     * if maxDepth is provided and is a number it checks if max depth is greater than zero for rendering child nodes.\n     *\n     * @param maxDepth\n     * @returns {boolean}\n     */\n    function shouldGoDeeper(maxDepth) {\n        return maxDepth === undefined || !isNaN(maxDepth) && maxDepth >= 0;\n    }\n\n    function generateHtml(nodes, maxDepth, params) {\n        if (!_angular2.default.isArray(nodes) || nodes.length === 0 || !shouldGoDeeper(maxDepth)) {\n            return '';\n        }\n\n        var html = '<ul class=\"tree-view collapsible\">';\n\n        for (var index = 0; index < nodes.length; index++) {\n            var node = nodes[index];\n\n            html += getListItem(node, index, {\n                maxDepth: maxDepth,\n                isCheckboxEnabled: params.isCheckboxEnabled\n            });\n        }\n\n        html += '</ul>';\n\n        return html;\n    }\n\n    function getToggleLinkHtml(nodeExpr) {\n        var isCollapsed = nodeExpr + '.collapsed';\n        var isNotCollapsed = '!' + isCollapsed;\n\n        return '<a class=\"toggle\" ng-click=\"vm.toggleNode(' + nodeExpr + ', $event)\" ng-if=\"vm.hasChildren(' + nodeExpr + ')\">' + '<i class=\"fa fa-w fa-chevron-right\" ng-show=\"' + isCollapsed + '\"></i>' + '<i class=\"fa fa-w fa-chevron-down\" ng-show=\"' + isNotCollapsed + '\"></i>' + '</a>';\n    }\n\n    function getLabelWithCheckbox(nodeExpr) {\n        var isSelected = nodeExpr + '.selected';\n        var name = '{{' + nodeExpr + '.name}}';\n\n        return '<label>' + '<input type=\"checkbox\" ng-model=\"' + isSelected + '\" ng-change=\"vm.handleChange(' + nodeExpr + ')\"> ' + '<span>' + name + '</span>' + '</label>';\n    }\n\n    function getLabel(nodeExpr) {\n        var name = '{{' + nodeExpr + '.name}}';\n\n        return '<span class=\"label\">' + name + '</span>';\n    }\n\n    function getListItem(node, index, params) {\n        var maxDepth = params.maxDepth;\n        var nodeExpr = 'vm.flatNodes[' + node.id + ']';\n        var label = params.isCheckboxEnabled ? getLabelWithCheckbox(nodeExpr) : getLabel(nodeExpr);\n\n        node.collapsed = maxDepth === 0;\n        // Decrement maxDepth for recursive calls\n        maxDepth = isNaN(maxDepth) ? undefined : maxDepth - 1;\n\n        return '<li class=\"tree-node\" data-index=\"' + index + '\" data-id=\"' + node.id + '\"' + ' ng-class=\"{parent: vm.hasChildren(' + nodeExpr + '), collapsed: ' + nodeExpr + '.collapsed,' + ' expanded: !' + nodeExpr + '.collapsed}\">' + getToggleLinkHtml(nodeExpr) + label + generateHtml(node.children, maxDepth, params) + '</li>';\n    }\n\n    return service;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/TreeGenerator.service.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = TreeView;\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO: Convert this to a simple javascript util module that exports some helper tree view methods\nfunction TreeView() {\n    var service = {};\n\n    service.hasChildren = hasChildren;\n\n    /**\n     * Walks through each node of the tree and applies the callback to each node walked.\n     *\n     * @param tree\n     * @param callback\n     */\n    service.walk = function (tree, callback) {\n        if (!Array.isArray(tree)) {\n            tree = [tree];\n        }\n\n        tree.forEach(function (node, index) {\n            callback(node, index);\n\n            if (hasChildren(node)) {\n                service.walk(node.children, callback);\n            }\n        });\n    };\n\n    /**\n     * Filters the tree recursively depending upon the boolean value returned by the callback\n     * for each node.\n     *\n     * @param tree\n     * @param callback\n     * @param inclusiveChildren\n     */\n    service.filter = function (tree, callback, inclusiveChildren) {\n        // If the tree is not an array make it an array\n        if (!_angular2.default.isArray(tree)) {\n            return service.filter([tree], callback, inclusiveChildren);\n        }\n\n        // Whether or not to include the child nodes even if their parent nodes aren't included.\n        if (inclusiveChildren === true) {\n            return filterTreeInclusive(tree, callback);\n        }\n\n        return filterTree(tree, callback);\n    };\n\n    /**\n     * Flattens the tree into a linear object with node id as it's keys.\n     *\n     * @param tree\n     * @returns {{}}\n     */\n    service.flattenAsObject = function (tree) {\n        var object = {};\n\n        service.walk(tree, function (node) {\n            object[node.id] = node;\n        });\n\n        return object;\n    };\n\n    /**\n     * Results a new array (immutable) obtained by applying the callback function to\n     * each node of the tree recursively.\n     *\n     * @param tree\n     * @param callback\n     */\n    service.map = function (tree, callback) {\n        // If the tree is not an array make it an array\n        if (!_angular2.default.isArray(tree)) {\n            return service.map([tree], callback);\n        }\n\n        return mapTree(tree, callback);\n    };\n\n    /**\n     * Counts the number of nodes a tree has.\n     *\n     * @param tree\n     * @returns {number}\n     */\n    service.count = function count(tree) {\n        tree = _angular2.default.isArray(tree) ? tree : [tree];\n\n        return tree.reduce(function (acc, node) {\n            var childTreeCount = hasChildren(node) ? count(node.children) : 0;\n\n            return acc + childTreeCount;\n        }, tree.length);\n    };\n\n    /**\n     * The actual implementation of the recursive map() function for trees.\n     *\n     * @param tree\n     * @param callback\n     * @returns {Array}\n     */\n    function mapTree(tree, callback) {\n        return tree.map(function (node, index) {\n            var mappedNode = callback(node, index);\n\n            // If the node has children then map them as well.\n            if (_angular2.default.isArray(node.children)) {\n                mappedNode.children = mapTree(node.children, callback);\n            }\n\n            return mappedNode;\n        });\n    }\n\n    /**\n     * Filter and return a new tree such that the nodes for which the callback\n     * returns false would be skipped along with all of their child nodes.\n     *\n     * @param tree\n     * @param callback\n     * @returns {Array}\n     */\n    function filterTree(tree, callback) {\n        var result = [];\n\n        if (!_angular2.default.isArray(tree)) {\n            return [];\n        }\n\n        for (var index = 0; index < tree.length; index++) {\n            var node = tree[index];\n            var shouldIncludeIt = callback(node, index);\n\n            // If the condition holds false for a single node\n            // ignore the whole tree of that node (including all it's children).\n            if (!shouldIncludeIt) {\n                continue;\n            }\n\n            node.children = filterTree(node.children, callback);\n            result.push(node);\n        }\n\n        return result;\n    }\n\n    /**\n     * Filter and return a new tree such that the nodes for which the callback returns false\n     * would be skipped but their children might be added to the new tree if the callback returns true\n     * for those.\n     * Note: The tree structure might change for this, as the children nodes could climb up the hierarchy\n     * in case their parents aren't included.\n     *\n     * @param tree\n     * @param callback\n     */\n    function filterTreeInclusive(tree, callback) {\n        var result = [];\n\n        if (!_angular2.default.isArray(tree)) {\n            return [];\n        }\n\n        for (var index = 0; index < tree.length; index++) {\n            var node = tree[index];\n            var shouldIncludeIt = callback(node, index);\n            var filteredChildren = filterTreeInclusive(node.children, callback);\n\n            if (shouldIncludeIt) {\n                // If the condition holds true then include the node\n                // along with it's filtered children.\n                node.children = filteredChildren;\n                result.push(node);\n            } else {\n                // Otherwise, just add the filtered children to the resulting filtered tree.\n                result = result.concat(filteredChildren);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if a node has child nodes.\n     *\n     * @param node\n     * @returns {boolean}\n     */\n    function hasChildren(node) {\n        return _angular2.default.isArray(node.children) && node.children.length > 0;\n    }\n\n    return service;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/TreeView.service.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = TreeViewController;\n\nvar _angular = require('angular');\n\nvar _angular2 = _interopRequireDefault(_angular);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nTreeViewController.$inject = ['$scope', '$timeout', '$element', '$compile', 'TreeView', 'TreeGenerator'];\n\nfunction TreeViewController($scope, $timeout, $element, $compile, TreeView, TreeGenerator) {\n    var vm = this;\n\n    vm.maxDepth = Number(vm.maxDepth) || 0;\n    vm.hasChildren = TreeView.hasChildren;\n    vm.flatNodes = {};\n    vm.isCheckboxEnabled = function () {\n        return vm.checkboxes === 'true';\n    };\n\n    vm.toggleNode = function (node, $event) {\n        var clickedElement = $event.currentTarget;\n        var nodeElement = _angular2.default.element(clickedElement).closest('li.tree-node');\n        var containsChildTree = nodeElement.find('ul.tree-view').length > 0;\n\n        // If the node's child tree hasn't been added to the DOM\n        // add it first.\n        if (TreeView.hasChildren(node) && !containsChildTree) {\n            var childTree = generateTree(node.children, 0);\n\n            nodeElement.append(childTree);\n        }\n\n        node.collapsed = !node.collapsed;\n    };\n\n    vm.handleChange = function (node) {\n        if (_angular2.default.isFunction(vm.onSelectionChange)) {\n            vm.onSelectionChange(node);\n        }\n    };\n\n    function init() {\n        $scope.vm = vm;\n        vm.flatNodes = TreeView.flattenAsObject(vm.nodes);\n        $timeout(render);\n    }\n\n    function render() {\n        var tree = generateTree(vm.nodes, vm.maxDepth);\n\n        $element.html(tree);\n    }\n\n    function generateTree(nodes, maxDepth) {\n        return TreeGenerator.generate(nodes, {\n            maxDepth: maxDepth,\n            scope: $scope,\n            isCheckboxEnabled: vm.isCheckboxEnabled()\n        });\n    }\n\n    init();\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/TreeViewController.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = treeView;\nfunction treeView() {\n    return {\n        restrict: 'E',\n        scope: {\n            nodes: '=',\n            maxDepth: '@',\n            checkboxes: '@',\n            onSelectionChange: '='\n        },\n        replace: true,\n        template: '',\n        controller: 'TreeViewController',\n        controllerAs: 'vm',\n        bindToController: true\n    };\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/treeView.directive.js","module.exports = require('./lib').default;\n\n\n\n// WEBPACK FOOTER //\n// ./index.js"],"sourceRoot":""}